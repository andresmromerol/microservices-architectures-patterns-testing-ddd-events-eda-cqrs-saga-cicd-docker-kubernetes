@startuml Auth Change Password Endpoint Diagram

title Auth Change Password Endpoint Diagram

skinparam backgroundColor white
skinparam style strictuml
skinparam componentStyle uml2

skinparam package {
    BackgroundColor<<Domain>> LightYellow
    BackgroundColor<<Application>> LightSalmon
    BackgroundColor<<Infrastructure>> LightGreen
    BackgroundColor<<Command>> Pink
    BackgroundColor<<Query>> LightBlue
    BackgroundColor<<Adapter>> LightGray
    BackgroundColor<<User>> #E0FFFF
    BackgroundColor<<UserRW>> #FFE0FF
    BackgroundColor<<Shared>> #F0F0F0
}

package "User" <<User>> {
    package "Domain" <<Domain>> {
        package "Model" <<Domain>> {
            class UserModel {
                - id: UserId
                - name: NameVo
                - email: EmailVo
                - password: PasswordVo
                - phone: PhoneVo
                - status: UserStatus
                - roles: Set<RoleEnum>
            }

            class TokenModel {
                - userId: UserId
                - token: String
                - expiresAt: LocalDateTime
                - type: TokenType
                - status: TokenStatus
            }
        }

        package "ValueObjects" <<Domain>> {
            class UserId {
                - value: UUID
            }
            
            class NameVo {
                - value: String
                - MIN_LENGTH: int
                - MAX_LENGTH: int
            }
            
            class EmailVo {
                - value: String
                - pattern: Pattern
            }
            
            class PasswordVo {
                - value: String
                - MIN_LENGTH: int
                - REQUIRES_SPECIAL: boolean
                - REQUIRES_NUMBER: boolean
            }
            
            class PhoneVo {
                - value: String
                - pattern: Pattern
            }

            class UserStatus {
                - value: UserStatusEnum
            }
        }

        package "Ports" <<Domain>> {
            interface IUserAuthPersistencePort {
                + findById(id: UserId): Optional<UserModel>
                + save(user: UserModel)
            }

            interface IPasswordPort {
                + encrypt(password: String): String
                + matches(rawPassword: String, encodedPassword: String): boolean
            }
        }

        package "Exceptions" <<Domain>> {
            class UserAuthNotFoundException {
                + id: UUID
                + message: String
            }

            class UserAuthPasswordInvalidException {
                + message: String
            }
        }
    }

    package "Application" <<Application>> {
        package "Commands" <<Command>> {
            package "ChangePassword" <<Command>> {
                class UserChangePasswordCmd {
                    + userId: UUID
                    + currentPassword: String
                    + newPassword: String
                }

                class UserChangePassword {
                    - userAuthPersistencePort: IUserAuthPersistencePort
                    - passwordPort: IPasswordPort
                    - queryBus: IQueryBus
                    + handle(command: UserChangePasswordCmd)
                }
                
                class UserChangePasswordHdr {
                    - userChangePassword: UserChangePassword
                    + handle(command: UserChangePasswordCmd)
                }
            }

            package "UserUpdate" <<Command>> {
                class UserUpdateCmd {
                    + userId: UUID
                    + name: String
                    + email: String
                    + phone: String
                    + status: UserStatusEnum
                    + roles: Set<RoleEnum>
                }

                class UserUpdate {
                    - userAuthPersistencePort: IUserAuthPersistencePort
                    + handle(command: UserUpdateCmd)
                }
                
                class UserUpdateHdr {
                    - userUpdate: UserUpdate
                    + handle(command: UserUpdateCmd)
                }
            }

            package "AuthenticationToken" <<Command>> {
                class AuthenticationTokenCmd {
                    + userId: UUID
                    + password: String
                }

                class AuthenticationToken {
                    - userAuthPersistencePort: IUserAuthPersistencePort
                    + handle(command: AuthenticationTokenCmd)
                }

                class AuthenticationTokenHdr {
                    - authenticationToken: AuthenticationToken
                    + handle(command: AuthenticationTokenCmd)
                }
            }
        }

        package "Password" <<Query>> {
            class EncryptPasswordQry {
                + password: String
            }

            class EncryptPasswordRes {
                + encryptedPassword: String
            }

            class EncryptPassword {
                - passwordPort: IPasswordPort
                + handle(query: EncryptPasswordQry): EncryptPasswordRes
            }
            
            class EncryptPasswordHdr {
                - encryptPassword: EncryptPassword
                + handle(query: EncryptPasswordQry)
            }
        }
    }

    package "Infrastructure" <<Infrastructure>> {
        package "REST" <<Infrastructure>> {
            class ChangePasswordAuthRestController {
                - commandBus: ICommandBus
                + changePassword(request: UserChangePasswordRequest)
            }

            class UserChangePasswordRequest {
                + userId: UUID
                + currentPassword: String
                + newPassword: String
                + validate()
                + toCommand(): UserChangePasswordCmd
            }
        }

        package "Persistence" <<Adapter>> {
            class UserAuthPersistenceAdapter {
                - repository: UserJpaRepository
                - mapper: UserPersistenceMapper
                + findById(id: UserId): Optional<UserModel>
                + save(user: UserModel)
            }
        }

        package "Security" <<Adapter>> {
            class PasswordSecurityAdapter {
                - passwordEncoder: PasswordEncoder
                + encrypt(password: String): String
                + matches(raw: String, encoded: String): boolean
            }
        }
    }
}

package "UserRW" <<UserRW>> {
    package "Domain" <<Domain>> {
        package "Model" <<Domain>> {
            class UserViewModel {
                - id: UUID
                - name: String
                - email: String
                - phone: String
                - status: UserStatusEnum
                - roles: Set<RoleEnum>
                - permissions: Set<PermissionEnum>
            }
        }

        package "ValueObjects" <<Domain>> {
            class EmailVo {
                - value: String
                - pattern: Pattern
            }
        }

        package "Ports" <<Domain>> {
            interface IUserRWPersistencePort {
                + findByEmail(email: String): Optional<UserModel>
            }
        }
    }

    package "Application" <<Application>> {
        package "Queries" <<Query>> {
            class UserSearchByEmailQry {
                + email: String
            }

            class UserSearchByEmailRes {
                + user: UserModel
            }

            class UserSearchByEmail {
                - userRWPersistencePort: IUserRWPersistencePort
                + handle(query: UserSearchByEmailQry): UserSearchByEmailRes
            }
            
            class UserSearchByEmailHdr {
                - userSearchByEmail: UserSearchByEmail
                + handle(query: UserSearchByEmailQry)
            }
        }
    }

    package "Infrastructure" <<Infrastructure>> {
        package "Persistence" <<Adapter>> {
            class UserRWPersistenceAdapter {
                - repository: UserJpaRepository
                - mapper: UserPersistenceMapper
                + findByEmail(email: String): Optional<UserModel>
            }
        }
    }
}

package "Shared" <<Shared>> {
    package "Domain" <<Domain>> {
        abstract class AggregateRoot<T> {
            # id: T
            + getId(): T
            # validateState()
        }
        
        package "Enums" <<Domain>> {
            enum UserStatusEnum {
                ACTIVE
                INACTIVE
                PENDING
                BLOCKED
            }
            
            enum RoleEnum {
                ADMIN
                USER
                GUEST
            }

            enum TokenType {
                ACCESS
                REFRESH
                RESET_PASSWORD
            }

            enum TokenStatus {
                ACTIVE
                REVOKED
                EXPIRED
            }

            enum PermissionEnum {
                READ
                WRITE
                DELETE
                ADMIN
            }
        }
    }

    package "Application" <<Application>> {
        package "Commands" <<Command>> {
            interface ICommand {
            }

            interface ICommandBus {
                + dispatch(command: ICommand)
            }
        }

        package "Queries" <<Query>> {
            interface IQuery {
            }

            interface IQueryBus {
                + ask(query: IQuery): Response
            }
        }
    }
}

UserModel --|> AggregateRoot
UserModel *-- UserId
UserModel *-- NameVo
UserModel *-- EmailVo
UserModel *-- PasswordVo
UserModel *-- PhoneVo
UserModel *-- UserStatus
UserModel *-- "0..*" RoleEnum

TokenModel *-- UserId
TokenModel *-- TokenType
TokenModel *-- TokenStatus

UserViewModel *-- "0..*" RoleEnum
UserViewModel *-- "0..*" PermissionEnum

RoleEnum *-- "0..*" PermissionEnum

UserChangePasswordRequest ..> UserChangePasswordCmd: creates
ChangePasswordAuthRestController ..> ICommandBus: uses
UserChangePasswordHdr ..> UserChangePassword: delegates
UserChangePassword ..> IUserAuthPersistencePort: uses
UserChangePassword ..> IPasswordPort: uses
UserChangePassword ..> IQueryBus: uses for password encryption

UserUpdateHdr ..> UserUpdate: delegates
UserUpdate ..> IUserAuthPersistencePort: uses

AuthenticationTokenHdr ..> AuthenticationToken: delegates
AuthenticationToken ..> IUserAuthPersistencePort: uses

UserSearchByEmailHdr ..> UserSearchByEmail: delegates
UserSearchByEmail ..> UserSearchByEmailQry: handles
UserSearchByEmail ..> UserSearchByEmailRes: produces
UserSearchByEmail ..> IUserRWPersistencePort: uses

EncryptPasswordHdr ..> EncryptPassword: delegates
EncryptPassword ..> EncryptPasswordQry: handles
EncryptPassword ..> EncryptPasswordRes: produces
EncryptPassword ..> IPasswordPort: uses

UserAuthPersistenceAdapter ..|> IUserAuthPersistencePort
UserRWPersistenceAdapter ..|> IUserRWPersistencePort
PasswordSecurityAdapter ..|> IPasswordPort

UserChangePassword ..> UserAuthNotFoundException: throws
UserChangePassword ..> UserAuthPasswordInvalidException: throws
UserUpdate ..> UserAuthNotFoundException: throws
AuthenticationToken ..> UserAuthNotFoundException: throws

center footer andresmromerol/microservices-architectures-patterns-testing-ddd-events-eda-cqrs-saga-cicd-docker-kubernetes

@enduml
